# AVL tree code june 15 2020

class Node:
    def __init__(self,val):
        self.val=val
        self.left_child=None
        self.right_child=None
        self.parent=None                            # pointer to parent node
        self.height = 1

class AVL_tree:
    def __init__(self,root):
        self.root=Node(root)


    def insert(self,val):
        return self.insert_node(self.root,val)

    def insert_node(self,curr_node,val):
        if val<curr_node.val:
            if curr_node.left_child==None:
                curr_node.left_child=Node(val)
                curr_node.left_child.parent=curr_node
                self.inspect_insertation(curr_node.left_child)
            else:
                self.insert_node(curr_node.left_child,val)
        elif val>curr_node.val:
            if curr_node.right_child==None:
                curr_node.right_child=Node(val)
                curr_node.right_child.parent=curr_node
                self.inspect_insertation(curr_node.right_child)
            else:
                self.insert_node(curr_node.right_child,val)
        else:
            print("value is aldready there")

    def print_tree(self):
        if self.root!=None:
            self._print_tree_(self.root)

    def _print_tree_(self,curr_node):
        if curr_node!=None:
            self._print_tree_(curr_node.left_child)
            print(str(curr_node.val))
            self._print_tree_(curr_node.right_child)

    def height(self):
        if self.root!=None:
            return self.node_height(self.root,0)
        else:
            return 0

    def node_height(self,curr_node,curr_height):
        if curr_node==None:
            return curr_height
        left_height=self.node_height(curr_node.left_child,curr_height+1)
        right_height=self.node_height(curr_node.right_child,curr_height+1)
        return max(left_height,right_height)

    def find(self,val):
        if self.root!=None:
            return self.find_node(self.root,val)
        else:
            return None

    def find_node(self,curr_node,val):
        if val==curr_node.val:
            return curr_node
        elif val<curr_node and curr_node.left_child!=None:
            return self.find_node(curr_node.left_child,val)
        elif val>curr_node and curr_node.right_child!=None:
            return self.find_node(curr_node.right_child,val)


    def delete(self,val):
        return self.delete_node(self.root,val)

    def delete_node(self,curr_node,val):
        if curr_node==None or self.find(curr_node.val)==None:
            print("Node is not in the tree")
            return None


        def min_value_node(n):
            current = n
            while current.left_child!=None:
                current = current.left_child
            return current

        def num_children(n):
            num_children = 0
            if n.left_child!=None:
                num_children+=1
            if n.right_child!=None:
                num_children+=1
            return num_children
        node_parent = curr_node.parent
        node_children = num_children(curr_node)
        if node_children == 0:

            if node_parent!=None:
                if node_parent.left_child==curr_node:
                    node_parent.left_child=None
                else:
                    node_parent=None
            else:
                self.root=None
        if node_children==1:

            if curr_node.left_child!=None:
                child = curr_node.left_child
            else:
                child = curr_node.right_child

            if node_parent!=None:

                if node_parent.left_child==curr_node:
                    node_parent.left_child = child
                else:
                    node_parent.right_child = child

            else:
                self.root=child

            child.parent= node_parent

        if node_children==2:
            sucessor = min_value_node(curr_node.right_child)

            curr_node.val = sucessor.val

            self.delete_node(sucessor)

            return

        if node_parent!=None:
            node_parent.height = 1+max(self.get_height(node_parent.left_child),self.get_height(node_parent.right_child))
            self.inspect_deletion(node_parent)


    def search(self,val):
        return self.search_node(self.root,val)

    def search_node(self,curr_node,val):
        if curr_node.val==val:
            return True

        else:
            if curr_node.val>val and curr_node.left_child!=None:
                return self.search_node(curr_node.left_child,val)
            elif curr_node.val<val and curr_node.right_child!=None:
                return self.search_node(curr_node.right_child,val)
            elif curr_node.val>val and curr_node.left_child==None:
                return False
            elif curr_node.val<val and curr_node.right_child!=None:
                return False


#   special function for AVL implementation in bst code

    def inspect_insertation(self,curr_node,path=[]):
        if curr_node.parent==None:
            return
        path=[curr_node]+path
        left_height= self.get_height(curr_node.parent.left_child)
        right_height=self.get_height(curr_node.parent.right_child)

        if abs(left_height-right_height)>1:
            path = [curr_node]+path
            self.rebalance_node(path[0],path[1],path[2])
            return
        new_height = 1+ curr_node.height

        if new_height>curr_node.parent.height:
            curr_node.parent.height = new_height

        self.inspect_insertation(curr_node.parent,path)


    def inspect_deletion(self,curr_node):
        if curr_node==None:
            return

        left_height = self.get_height(curr_node.left_child)
        right_height = self.get_height(curr_node.right_child)

        if abs(left_height-right_height)>1:
            y = self.taller_child(curr_node)
            x=self.taller_child(y)
            self.rebalance_node(curr_node,y,x)



    def rebalance_node(self,z,y,x):
        if y==z.left_child and x==y.left_child:
            self.right_rotate(z)
        elif y==z.left_child and x==y.right_child:
            self.left_rotate(y)
            self.right_rotate(z)
        elif y==z.right_child and x==y.right_child:
            self.left_rotate(z)
        elif y==z.right_child and x==y.left_child:
            self.right_rotate(y)
            self.left_rotate(z)
        else:
            raise Exception('config not recognized')

    def right_rotate(self,z): # for diagram -- look in python notebook 2 in revision section
        sub_root = z.parent
        y=z.left_child
        t3= y.right_child
        y.right_child = z
        z.parent = y
        z.left_child=t3
        if t3!=None :
             t3.parent = z
        else:
            if y.parent.left_child == z:
                y.parent.left_child=y
            else:
                y.parent.left_child=y
        z.height= 1+max(self.get_height(z.left_child),self.get_height(z.right_child))
        y.height = 1 + max(self.get_height(y.left_child), self.get_height(y.right_child))

    def left_rotate(self,z):   # for diagram -- look in python notebook 2 in revision section
        sub_root=z.parent
        y=z.right_child
        t2=y.left_child
        y.left_child=z
        z.parent=y
        z.right_child=t2
        if t2!=None:
            t2.parent=z
        y.parent=sub_root
        if y.parent==None:
            self.root=y
        else:
            if y.parent.leftchild==z:
                y.parent.left_child=y
            else:
                y.parent.right_child=y
        z.height = 1 + max(self.get_height(z.left_child), self.get_height(z.right_child))
        y.height = 1 + max(self.get_height(y.left_child), self.get_height(y.right_child))



    def get_height(self,curr_node):
        if curr_node==None:
            return 0
        return curr_node.height

    def taller_child(self,curr_node):
        left=self.get_height(curr_node.left_child)
        right=self.get_height(curr_node.right_child)
        if left>=right:
            return curr_node.left_child

        return curr_node.right_child


#   example

# A=AVL_tree()
# for i in range(10):
#     A.insert(i)
